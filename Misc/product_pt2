set +x
#!/bin/bash
#VARIABLES for "pt2"
suffix="--region us-east-1"
#ENVIRONMENT
env="pt2"
#DATABASE NAME
dbidentifier="dbpt2"
opensearch_identifier='pvai-product-pt2'
tgfilter=$'|grep -i TargetGroupArn | awk -F\'\"\' \'{print $4}\''
redshift_identifier="pvai-product-pt2-redshift"
echo "Triggered - $EnvironmentState"
date 

#TARGET-GROUP ARN's
#EC2 TargetGroups
arn=`echo "aws elbv2 describe-target-groups --names $env-core $suffix $tgfilter"`;core=`eval $arn`
echo "Var Name - $core"
arn=`echo "aws elbv2 describe-target-groups --names $env-coreing $suffix $tgfilter"`;coreing=`eval $arn`
echo "Var Name - $coreing"
arn=`echo "aws elbv2 describe-target-groups --names $env-bat $suffix $tgfilter"`;bat=`eval $arn`
echo "Var Name - $bat"
arn=`echo "aws elbv2 describe-target-groups --names $env-doc $suffix $tgfilter"`;doc=`eval $arn`
echo "Var Name - $doc"
arn=`echo "aws elbv2 describe-target-groups --names $env-args $suffix $tgfilter"`;argus=`eval $arn`
echo "Var Name - $argus"
arn=`echo "aws elbv2 describe-target-groups --names $env-freetext $suffix $tgfilter"`;freetext=`eval $arn`
echo "Var Name - $freetext"
arn=`echo "aws elbv2 describe-target-groups --names $env-report $suffix $tgfilter"`;report=`eval $arn`
echo "Var Name - $report"

#ECS-CLUSTER-NAME
ecscluster="product-$env-cluster"
echo "Var Name - $ecscluster"

#ECS TargetGroups
#Ingestion Services
arn=`echo "aws elbv2 describe-target-groups --names $env-ing-master $suffix $tgfilter"`;ing_master=`eval $arn`
echo "Var Name - $ing_master"
arn=`echo "aws elbv2 describe-target-groups --names $env-ing-meta $suffix $tgfilter"`;ing_meta=`eval $arn`
echo "Var Name - $ing_meta"
arn=`echo "aws elbv2 describe-target-groups --names $env-ing-job $suffix $tgfilter"`;ing_job=`eval $arn`
echo "Var Name - $ing_job"

#Tibco Services
arn=`echo "aws elbv2 describe-target-groups --names $env-tib-email $suffix $tgfilter"`;tib_email=`eval $arn`
echo "Var Name - $tib_email"
arn=`echo "aws elbv2 describe-target-groups --names $env-tib-lit $suffix $tgfilter"`;tib_lit=`eval $arn`
echo "Var Name - $tib_lit"
arn=`echo "aws elbv2 describe-target-groups --names $env-tib-recov $suffix $tgfilter"`;tib_recov=`eval $arn`
echo "Var Name - $tib_recov"

#XCE Services
arn=`echo "aws elbv2 describe-target-groups --names $env-xce-orchestration $suffix $tgfilter"`;xce_orchestration=`eval $arn`
echo "Var Name - $xce_orchestration"
arn=`echo "aws elbv2 describe-target-groups --names $env-xce-datatransmit $suffix $tgfilter"`;xce_datatransmit=`eval $arn`
echo "Var Name - $xce_datatransmit"
arn=`echo "aws elbv2 describe-target-groups --names $env-xce-coding $suffix $tgfilter"`;xce_coding=`eval $arn`
echo "Var Name - $xce_coding"
arn=`echo "aws elbv2 describe-target-groups --names $env-xce-transformation $suffix $tgfilter"`;xce_transformation=`eval $arn`
echo "Var Name - $xce_transformation"
arn=`echo "aws elbv2 describe-target-groups --names $env-xce-e2bparsing $suffix $tgfilter"`;xce_e2bparsing=`eval $arn`
echo "Var Name - $xce_e2bparsing"
arn=`echo "aws elbv2 describe-target-groups --names $env-xce-mock $suffix $tgfilter"`;xce_mock=`eval $arn`
echo "Var Name - $xce_mock

#EXT Services
arn=`echo "aws elbv2 describe-target-groups --names $env-ext-jsontransform $suffix $tgfilter"`;ext_jsontransform=`eval $arn`
echo "Var Name - $ext_jsontransform"
arn=`echo "aws elbv2 describe-target-groups --names $env-ext-meddra $suffix $tgfilter"`;ext_meddra=`eval $arn`
echo "Var Name - $ext_meddra"
arn=`echo "aws elbv2 describe-target-groups --names $env-ext-whodrug $suffix $tgfilter"`;ext_whodrug=`eval $arn`
echo "Var Name - $ext_whodrug"
arn=`echo "aws elbv2 describe-target-groups --names $env-ext-analyticscore $suffix $tgfilter"`;ext_analyticscore=`eval $arn`
echo "Var Name - $ext_analyticscore"

echo "$env - Variables Defined"

turnOFF()
{
##### TARGET-GROUPS #####
echo "MODIFY - Deregistration Delay Time for all the Target Groups of the Applications"
#COREAPP TargetGroup - Modify the Deregistration Delay on TG for CoreAPP.
aws elbv2 modify-target-group-attributes --target-group-arn $core --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $coreing --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#BATCH TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $bat --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#DOC TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $doc --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#ARGUS TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $argus --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#FREETEXT TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $freetext --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#FREETEXT TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $report --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &


#Ingestion-MASTER
aws elbv2 modify-target-group-attributes --target-group-arn $ing_master --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#Ingestion-META
aws elbv2 modify-target-group-attributes --target-group-arn $ing_meta --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#Ingestion-JOB
aws elbv2 modify-target-group-attributes --target-group-arn $ing_job --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &

#Tibco-EMAIL
aws elbv2 modify-target-group-attributes --target-group-arn $tib_email --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#Tibco-LIT
aws elbv2 modify-target-group-attributes --target-group-arn $tib_lit --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#Tibco-RECOV
aws elbv2 modify-target-group-attributes --target-group-arn $tib_recov --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix 

#XCE Services
aws elbv2 modify-target-group-attributes --target-group-arn $xce_orchestration --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_datatransmit --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_coding --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_transformation --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_e2bparsing --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_mock --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &

#EXTRA Services
aws elbv2 modify-target-group-attributes --target-group-arn $ext_jsontransform --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $ext_whodrug --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $ext_meddra --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $ext_analyticscore --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#aws elbv2 modify-target-group-attributes --target-group-arn $ext_narrative --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &
#aws elbv2 modify-target-group-attributes --target-group-arn $ext_mocksdra --attributes Key=deregistration_delay.timeout_seconds,Value=10 $suffix &

#WAIT for 5Seconds after the Deregistration Delay has been Modified.
sleep 5

echo "All Deregistration Delays Modified"


##### DATABASE-OFF #####
status=`aws rds describe-db-instances --db-instance-identifier $dbidentifier --region us-east-1 | grep -i "DBInstanceStatus" | awk -F'"' '{print $4}'`
if [[ "$status" == "available" ]]
then
#Stop the RDS Instance.
aws rds stop-db-instance --db-instance-identifier $dbidentifier $suffix &
while [ "$status" != "stopped" ]
do
  sleep 30
  status=`aws rds describe-db-instances --db-instance-identifier $dbidentifier --region us-east-1 | grep -i "DBInstanceStatus" | awk -F'"' '{print $4}'`
  echo "Current DB status - $status"
done
elif [[ "$status" == "stopped" || "$status" == "stopping" ]]
then
echo "RDS is already in $status State - Proceeding to stop other services"
else
echo "RDS STATE - $status"
fi

#### REDSHIFT OFF ####
redshift_status=`aws redshift describe-clusters --cluster-identifier $redshift_identifier $suffix | grep -i "ClusterStatus" | awk -F'"' '{print $4}'`
if [[ "$redshift_status" == "available" ]]
then
echo "Pausing the Redshift Cluster - $redshift_identifier"
aws redshift pause-cluster --cluster-identifier $redshift_identifier $suffix &
while [ "$redshift_status" != "paused" ]
do
  sleep 60
  redshift_status=`aws redshift describe-clusters --cluster-identifier $redshift_identifier $suffix | grep -i "ClusterStatus" | awk -F'"' '{print $4}'`
  echo "Current Redshift Status - $redshift_status"
done
else
echo "Redshift Cluster $redshift_identifier STATE - $redshift_status"
fi

#STOP - CoreAPP Server Shutdown
app=coreapp
CoreArray=( $(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix) )
aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${CoreArray[0]} --min-size 0 --desired-capacity 0 $suffix &
aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${CoreArray[1]} --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Stopped."

app=bat
batch=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $batch --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Stopped."

app=doc
docconversion=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $docconversion --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Stopped."

app=argus
args=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $args --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Stopped."

app=freetext
free=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $free --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Stopped."

app=report
reports=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $reports --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Stopped."

#SERVICES OFF ECS
#Reset the Minimum Count on all the Ingestion Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ing-job --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ing-meta --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ing-master --min-capacity 0 $suffix
echo "Modified the Minimum Count on all the INGESTION Services for $env Environment."

#Reset the Minimum Count on all the TIBCO Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/tib-email --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/tib-lit --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/tib-recov --min-capacity 0 $suffix
echo "Modified the Minimum Count on all the TIBCO Services for $env Environment."

#Reset the Minimum Count on all the XCE Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-orchestration --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-datatransmit --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-coding --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-transformation --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-e2bparsing --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-mock --min-capacity 0 $suffix
echo "Modified the Minimum Count on all the XCE Services for $env Environment."

#Reset the Minimum Count on all the EXTRA Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-jsontransform --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-meddra --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-whodrug --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-analyticscore --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-narrative --min-capacity 0 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-mocksdra --min-capacity 0 $suffix
echo "Modified the Minimum Count on all the EXT Services for $env Environment."


#SERVICES OFF ECS
#Stop the Ingestion Services
aws ecs update-service --cluster $ecscluster --service  ing-job --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 30
aws ecs update-service --cluster $ecscluster --service  ing-meta --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ing-meta --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ing-master --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
echo "All Ingestion Services for $env Environment Stopped."
#Stop the TIBCO Services
aws ecs update-service --cluster $ecscluster --service  tib-email --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  tib-lit --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  tib-recov --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
echo "All TIBCO Services for $env Environment Stopped."

#Stop the XCE Services
aws ecs update-service --cluster $ecscluster --service  xce-orchestration --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-datatransmit --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-coding --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-transformation --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-e2bparsing --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-mock --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
echo "All XCE Services for $env Environment Stopped."

#Stop the EXTRA Services
aws ecs update-service --cluster $ecscluster --service  ext-jsontransform --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-meddra --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-whodrug --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-analyticscore --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-narrative --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-mocksdra --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-jsontransform --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-meddra --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-whodrug --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-analyticscore --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-narrative --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-mocksdra --deployment-configuration minimumHealthyPercent=0 --desired-count 0 $suffix &
sleep 10
echo "All EXTRA Services for $env Environment Stopped."
}

#### Opensearch Instance Scale-Down ####
status_check (){
    x=`aws opensearch describe-domain-config --domain-name ansaf-testing-domain --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.EngineVersion.Status.State'`
    y=`aws opensearch describe-domain-config --domain-name ansaf-testing-domain --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.ClusterConfig.Status.State'`
    z=`aws opensearch describe-domain-config --domain-name ansaf-testing-domain --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.EBSOptions.Status.State'`
    i=`aws es describe-elasticsearch-domain-config --domain-name ansaf-testing-domain --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'`
            }

status_check
if [ $x == '"Active"' ] && [ $y == '"Active"' ] && [ $z == '"Active"' ] && [ $i == '"r6g.large.elasticsearch"' ]; then
    echo "continue"
    aws es update-elasticsearch-domain-config --domain-name ansaf-testing-domain --profile product --region us-east-1 --elasticsearch-cluster-config InstanceType=c6g.large.elasticsearch --no-verify-ssl

    status_check    
    while [ $x == '"Active"' ] && [ $y == '"Active"' ] && [ $z == '"Active"' ]
    do
        status_check
        echo 'opensearch cluster did not come up yet.'
        sleep 5
    done
else
    echo "Opensearch Cluster is not active."
fi

# turnON() 
# {
# #### REDSHIFT ON ####
# redshift_status=`aws redshift describe-clusters --cluster-identifier $redshift_identifier $suffix | grep -i "ClusterStatus" | awk -F'"' '{print $4}'`
# if [[ "$redshift_status" == "paused" ]]
# then
# echo "Resuming the Redshift Cluster - $redshift_identifier"
# aws redshift resume-cluster --cluster-identifier $redshift_identifier $suffix &
# while [ "$redshift_status" != "available" ]
# do
#   sleep 30
#   redshift_status=`aws redshift describe-clusters --cluster-identifier $redshift_identifier $suffix | grep -i "ClusterStatus" | awk -F'"' '{print $4}'`
#   echo "Current Redshift Status - $redshift_status"
# done
# else
# echo "Redshift Cluster $redshift_identifier STATE - $redshift_status"
# fi 

# ##### DATABASE-ON #####
# status=`aws rds describe-db-instances --db-instance-identifier $dbidentifier --region us-east-1 | grep -i "DBInstanceStatus" | awk -F'"' '{print $4}'`
# if [[ "$status" == "available" ]]
# then
# echo "RDS is already Turned ON"
# elif [[ "$status" == "stopped" ]]
# then
# echo "RDS is $status - S T A R T the RDS - TurnON"
# aws rds start-db-instance --db-instance-identifier $dbidentifier $suffix &
# while [ "$status" != "available" ]
# do
#   sleep 45
#   status=`aws rds describe-db-instances --db-instance-identifier $dbidentifier --region us-east-1 | grep -i "DBInstanceStatus" | awk -F'"' '{print $4}'`
#   echo "Current DB status - $status"
# done
# echo "RDS is now - $status"
# else
# echo "RDS STATE - $status"
# fi

# #Resume Redshift Cluster
# echo "RESUME the Redshift Cluster $redshify_identifier"
# aws redshift resume-cluster --cluster-identifier $redshift_identifier --region us-east-1

#Start - CoreAPP Server
app=coreapp
CoreArray=($(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix))
aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${CoreArray[0]} --min-size 2 --desired-capacity 2 $suffix &
aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${CoreArray[1]} --min-size 2 --desired-capacity 2 $suffix &
echo "CoreApp & CoreAPP Ingestion for $env Environment Started."

#Batch
app=bat
batch=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
#Disable Scaling Alarm
PolicyName=`aws autoscaling describe-policies --auto-scaling-group-name $batch $suffix | grep -E "PolicyName"| awk -F'"' '{print $4}'`
PolicyType=`aws autoscaling describe-policies --auto-scaling-group-name $batch $suffix | grep -E "PolicyType"| awk -F'"' '{print $4}'`
aws autoscaling put-scaling-policy --auto-scaling-group-name $batch \
   --policy-name $PolicyName --policy-type $PolicyType \
   --estimated-instance-warmup 360 \
   --target-tracking-configuration '{ "TargetValue": 50, "PredefinedMetricSpecification": { "PredefinedMetricType": "ASGAverageCPUUtilization" } }' --no-enabled $suffix
echo "Scaling Alarm for $app for $env Disabled"
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $batch --min-size 1 --desired-capacity 1 $suffix &
echo "$app for $env Environment Started."

#DocConversion
app=doc
docconversion=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
#Disable Scaling Alarm
PolicyName=`aws autoscaling describe-policies --auto-scaling-group-name $docconversion $suffix | grep -E "PolicyName"| awk -F'"' '{print $4}'`
PolicyType=`aws autoscaling describe-policies --auto-scaling-group-name $docconversion $suffix | grep -E "PolicyType"| awk -F'"' '{print $4}'`
aws autoscaling put-scaling-policy --auto-scaling-group-name $docconversion \
   --policy-name $PolicyName --policy-type $PolicyType \
   --estimated-instance-warmup 360 \
   --target-tracking-configuration '{ "TargetValue": 20, "PredefinedMetricSpecification": { "PredefinedMetricType": "ASGAverageCPUUtilization" } }' --no-enabled $suffix
echo "Scaling Alarm for $app for $env Disabled"
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $docconversion --min-size 1 --desired-capacity 1 $suffix &
echo "$app for $env Environment Started."

#ARGUS
app=argus
args=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $args --min-size 1 --desired-capacity 1 $suffix &
echo "$app for $env Environment Started."

#FREETEXT - is not used in 2.0 Keep it ShutDown.
app=freetext
free=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $free --min-size 0 --desired-capacity 0 $suffix &
echo "$app for $env Environment Started."

#REPORT
app=report
report=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
aws autoscaling update-auto-scaling-group --auto-scaling-group-name $report --min-size 1 --desired-capacity 1 $suffix &
echo "$app for $env Environment Started."

#SERVICES ON ECS
#Reset the Minimum Count on all the Ingestion Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ing-job --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ing-meta --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ing-master --min-capacity 2 $suffix
echo "Modified the Minimum Count on all the INGESTION Services for $env Environment."

#Reset the Minimum Count on all the TIBCO Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/tib-email --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/tib-lit --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/tib-recov --min-capacity 2 $suffix
echo "Modified the Minimum Count on all the TIBCO Services for $env Environment."

#Reset the Minimum Count on all the XCE Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-orchestration --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-datatransmit --min-capacity 4 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-coding --min-capacity 4 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-transformation --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-e2bparsing --min-capacity 2 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/xce-mock --min-capacity 1 $suffix
echo "Modified the Minimum Count on all the XCE Services for $env Environment."

#Reset the Minimum Count on all the EXTRA Services
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-jsontransform --min-capacity 1 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-meddra --min-capacity 1 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-whodrug --min-capacity 1 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-analyticscore --min-capacity 1 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-narrative --min-capacity 1 $suffix
aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/$ecscluster/ext-mocksdra --min-capacity 1 $suffix
echo "Modified the Minimum Count on all the EXT Services for $env Environment."

#SERVICES ON ECS
#Start the TIBCO Services
aws ecs update-service --cluster $ecscluster --service  tib-email --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  tib-lit --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  tib-recov --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
echo "TIBCO Service - email, literature, recovery for $env Environment Started."

#Start the XCE Services
aws ecs update-service --cluster $ecscluster --service  xce-orchestration --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-datatransmit --deployment-configuration minimumHealthyPercent=50 --desired-count 4 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-coding --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-transformation --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-e2bparsing --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  xce-mock --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
echo "XCE Service - orchestration, datatransmit, coding, transformation, e2bparsing, mock for $env Environment Started."

#Start the EXTRA Services
aws ecs update-service --cluster $ecscluster --service  ext-jsontransform --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-meddra --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-whodrug --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-analyticscore --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-narrative --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
aws ecs update-service --cluster $ecscluster --service  ext-mocksdra --deployment-configuration minimumHealthyPercent=0 --desired-count 1 $suffix &
sleep 10
echo "EXTRA Service - jsontransform, meddra, whodrug, analyticscore, narrative, mocksdra for $env Environment Started."

#Start the Ingestion Services
aws ecs update-service --cluster $ecscluster --service  ing-master --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
echo "Ingestion Services - Starting ing-master for $env Environment."
sleep 180

aws ecs update-service --cluster $ecscluster --service  ing-meta --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
echo "Ingestion Services - Starting ing-meta for $env Environment."
sleep 120

aws ecs update-service --cluster $ecscluster --service  ing-job --deployment-configuration minimumHealthyPercent=50 --desired-count 2 $suffix &
echo "Ingestion Services - Starting ing-job for $env Environment."

#WAIT for 5mins Seconds after the servers are spun up
sleep 300

##### TARGET-GROUPS #####
#MODIFY - Deregistration Delay Time for all the Target Groups of the Applications

#COREAPP TargetGroup - Modify the Deregistration Delay on TG for CoreAPP.
aws elbv2 modify-target-group-attributes --target-group-arn $core --attributes Key=deregistration_delay.timeout_seconds,Value=1860 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $coreing --attributes Key=deregistration_delay.timeout_seconds,Value=1860 $suffix &
#BATCH TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $bat --attributes Key=deregistration_delay.timeout_seconds,Value=60 $suffix &
#DOC TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $doc --attributes Key=deregistration_delay.timeout_seconds,Value=30 $suffix &
#ARGUS TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $argus --attributes Key=deregistration_delay.timeout_seconds,Value=60 $suffix &
#FREETEXT TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $freetext --attributes Key=deregistration_delay.timeout_seconds,Value=60 $suffix &
#Report TargetGroup
aws elbv2 modify-target-group-attributes --target-group-arn $report --attributes Key=deregistration_delay.timeout_seconds,Value=60 $suffix &

#INGESTION SERVICES
#Ingestion-MASTER
aws elbv2 modify-target-group-attributes --target-group-arn $ing_master --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
#Ingestion-META
aws elbv2 modify-target-group-attributes --target-group-arn $ing_meta --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
#Ingestion-JOB
aws elbv2 modify-target-group-attributes --target-group-arn $ing_job --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &

#TIBCO Services
#Tibco-EMAIL
aws elbv2 modify-target-group-attributes --target-group-arn $tib_email --attributes Key=deregistration_delay.timeout_seconds,Value=130 $suffix &
#Tibco-LIT
aws elbv2 modify-target-group-attributes --target-group-arn $tib_lit --attributes Key=deregistration_delay.timeout_seconds,Value=130 $suffix &
#Tibco-RECOV
aws elbv2 modify-target-group-attributes --target-group-arn $tib_recov --attributes Key=deregistration_delay.timeout_seconds,Value=130 $suffix &

#XCE Services
aws elbv2 modify-target-group-attributes --target-group-arn $xce_orchestration --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_datatransmit --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_coding --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_transformation --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_e2bparsing --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $xce_mock --attributes Key=deregistration_delay.timeout_seconds,Value=360 $suffix &

#EXTRA Services
aws elbv2 modify-target-group-attributes --target-group-arn $ext_jsontransform --attributes Key=deregistration_delay.timeout_seconds,Value=120 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $ext_whodrug --attributes Key=deregistration_delay.timeout_seconds,Value=120 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $ext_meddra --attributes Key=deregistration_delay.timeout_seconds,Value=120 $suffix &
aws elbv2 modify-target-group-attributes --target-group-arn $ext_analyticscore --attributes Key=deregistration_delay.timeout_seconds,Value=120 $suffix &
echo "All deregistration_delay values have been reset on $env"
sleep 5.

#RE-ENABLE ASG SCALING ALARMS for BATCH & DocConversion Servers.
#Batch
app=bat
batch=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
#Enable Scaling Alarm
PolicyName=`aws autoscaling describe-policies --auto-scaling-group-name $batch $suffix | grep -E "PolicyName"| awk -F':' '{print $2}'|sed 's/"//g'|sed 's/,//g'`
PolicyType=`aws autoscaling describe-policies --auto-scaling-group-name $batch $suffix | grep -E "PolicyType"| awk -F':' '{print $2}'|sed 's/"//g'|sed 's/,//g'`
aws autoscaling put-scaling-policy --auto-scaling-group-name $batch \
   --policy-name $PolicyName --policy-type $PolicyType \
   --estimated-instance-warmup 360 \
   --target-tracking-configuration '{ "TargetValue": 50, "PredefinedMetricSpecification": { "PredefinedMetricType": "ASGAverageCPUUtilization" } }' --enabled $suffix
echo "Scaling Alarm for $app for $env Re-Enabled."

#DocConversion
app=doc
docconversion=`aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[? Tags[? (Key=='aws:cloudformation:stack-name') && Value=='"$env-$app"']]".AutoScalingGroupName --output text $suffix`
#Enable Scaling Alarm
PolicyName=`aws autoscaling describe-policies --auto-scaling-group-name $docconversion $suffix | grep -E "PolicyName"| awk -F':' '{print $2}'|sed 's/"//g'|sed 's/,//g'`
PolicyType=`aws autoscaling describe-policies --auto-scaling-group-name $docconversion $suffix | grep -E "PolicyType"| awk -F':' '{print $2}'|sed 's/"//g'|sed 's/,//g'`
aws autoscaling put-scaling-policy --auto-scaling-group-name $docconversion \
   --policy-name $PolicyName --policy-type $PolicyType \
   --estimated-instance-warmup 360 \
   --target-tracking-configuration '{ "TargetValue": 20, "PredefinedMetricSpecification": { "PredefinedMetricType": "ASGAverageCPUUtilization" } }' --enabled $suffix
echo "Scaling Alarm for $app for $env Re-Enabled."
}

#### Opensearch Instance Scale-Up ####
status_check () {
    x=`aws opensearch describe-domain-config --domain-name $opensearch_identifier --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.EngineVersion.Status.State'`
    y=`aws opensearch describe-domain-config --domain-name $opensearch_identifier --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.ClusterConfig.Status.State'`
    z=`aws opensearch describe-domain-config --domain-name $opensearch_identifier --profile product --region us-east-1 --no-verify-ssl --query 'DomainConfig.EBSOptions.Status.State'`
}

status_check
if [ $x == '"Active"' ] &&  [ $y == '"Active"' ] && [ $z == '"Active"' ]; then
    echo "continue"
    aws es update-elasticsearch-domain-config --domain-name $opensearch_identifier --profile product --region us-east-1 --elasticsearch-cluster-config InstanceType=r6g.large.search

    status_check    
    while [ $x == '"Active"' ] &&  [ $y == '"Active"' ] && [ $z == '"Active"' ]
    do
        status_check
        echo 'opensearch cluster did not come up yet.'
        sleep 5
    done
else
    echo "Opensearch Cluster is not active."
fi

if [[ "$EnvironmentState" == "ON" ]]; 
then
echo "S T A R T I N G           - P T 2"
date
turnON
date
turnON
date
else
echo "S H U T T I N G  D O W N  - P T 2" 
date
turnOFF
date
turnOFF
date
fi
