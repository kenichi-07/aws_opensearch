#------------------------------------------------------------------------------------#
## Copyright ? Genpact 2018. All Rights Reserved.                                   ##
## Ltd trading as G in NYSE - Registered in US.                                     ##
## Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.  ##
#------------------------------------------------------------------------------------#
## Author = 'Sandeep Kumar & Pankaj Motwani  (Genpact Limited)'                     ##
## Version = '1.0.0'                                                                ##
## Date = 17-Apr-2018                                                               ##
#------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------#
## Author = 'Yukti Srivastava'                                                      ##
## Version = '2.0.0'                                                                ##
## changes = "Added EnvName As Variable"                                            ##
## Date = 6-Aug-2020                                                                ##
#------------------------------------------------------------------------------------#
AWSTemplateFormatVersion: 2010-09-09
Description: Redis Cluster Group Creation
Parameters:
    Prefix:
        Description: Prefix Name
        Default: pvai
        Type: String
    Productversion:
        Description: Release Version
        Default: 1.1
        Type: Number
    Region:
        Description: AWS Region
        Default: eu-west-1
        Type: String
        AllowedValues:
           - eu-west-1
           - eu-west-1
        ConstraintDescription: Select the AWS Region.
    EnvName:
        Description: Environment Type
        Default: dev
        Type: String
    EnvType: 
        Description: Environment Type
        Default: dev
        Type: String
        AllowedValues: 
           - dev
           - ml
           - sit
           - val
           - prod
           - ut
           - pt
        ConstraintDescription: Select the Environment for Creation.
    CIDR:
        Description: CIDR for Security Group
        Default: "10.0.0.0/8"
        Type: String
    RedisPort:
        Description: Port for Redis Cluster
        Default: "6379"
        Type: String
        AllowedPattern: ^[0-9/]*$
    NodeInstanceType:
        Description: Instance Type for Redis Cluster
        Default: "cache.t3.small"
        Type: String
    EngineVersion:
        Description: Redis Cluster Engine Version
        Default: "3.2.6"
        Type: String
    SnapshotRetentionLimit:
        Description: Retention Limit for Snapshots
        Default: 5
        Type: Number
        MinValue: 1
        MaxValue: 10
# Parameter for deciding whether to go with Clustered Mode or Just Redis Instance
    ClusterMode:
        Description: To enable/disable Cluster mode
        Default: 'true'
        Type: String
        AllowedValues: [ 'true', 'false' ]        
    NumNodeGroups:
        Description: Number of Node Groups for RedisCluster Only
        Default: "2"
        Type: String
    ReplicasPerNodeGroup:
        Description: Replicas per Node Groups
        Default: "1"
        Type: String
    AutomaticFailoverEnabled:
        Description: To have replica of RedisCluster
        Default: 'true'
        Type: String
        AllowedValues: [ 'true', 'false' ]
    HostedZoneResource:
       Description: Private DNS
       Type: String
       Default: local.
#Conditions to handle cases as per selected environment and region        
Conditions:
# Create condition based on the Environment selected;
# To fetch the VPC and Subnet values based on the condition
  GetDevNetworkValues: !And
       - !Equals [ !Ref EnvType, "dev" ]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetMLNetworkValues: !And
       - !Equals [ !Ref EnvType, "ml"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetPTNetworkValues: !And
       - !Equals [ !Ref EnvType, "pt"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetUTNetworkValues: !And
       - !Equals [ !Ref EnvType, "ut"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetSITNetworkValues: !And
       - !Equals [ !Ref EnvType, "sit"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetValNetworkValues: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetProdNetworkValues: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetProdNetworkValuesIreland: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, eu-west-1 ]
  GetValNetworkValuesIreland: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, eu-west-1 ]
  # Creation condition for Cluster
  ClusterModeEnabled: !Equals [ !Ref ClusterMode, "true"]
  ClusterModeDisabled: !Equals [ !Ref ClusterMode, "false"]
  # Condition for Primary Region
  CreateResourceInNVirginiaWithCluster: !And
        - !Equals [ !Ref Region, eu-west-1 ]
        - !Equals [ !Ref ClusterMode, "true"]
  CreateResourceInNVirginiaWithOutCluster: !And
        - !Equals [ !Ref Region, eu-west-1 ]
        - !Equals [ !Ref ClusterMode, "false"]
Resources:
  RedisSubnetGroup: 
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties: 
        Description: !Sub "Redis Subnet Group ${EnvName}"
        CacheSubnetGroupName: !Sub "RedisSubnetGroup${EnvName}"
        SubnetIds: 
        # Fetch EC2Subnet1 and EC2Subnet2 values
        # Based on the condition defined as per Environment selected
           - !If [GetValNetworkValues, !ImportValue subnet33b0A, !If [GetProdNetworkValues, !ImportValue subnet34b0A, !If [GetDevNetworkValues, !ImportValue subnet35b1A, !If [GetMLNetworkValues, !ImportValue subnet34b1A, !If [GetPTNetworkValues, !ImportValue subnet33b4A, !If [GetUTNetworkValues, !ImportValue subnet33b3A, !If [GetSITNetworkValues, !ImportValue subnet34b2A, !If [GetProdNetworkValuesIreland,!ImportValue subnet34b0B, !If [GetValNetworkValuesIreland, !ImportValue subnet33b0B, ""]]]]]]]]]
           - !If [GetValNetworkValues, !ImportValue subnet37b0A, !If [GetProdNetworkValues, !ImportValue subnet38b0A, !If [GetDevNetworkValues, !ImportValue subnet39b1A, !If [GetMLNetworkValues, !ImportValue subnet38b1A, !If [GetPTNetworkValues, !ImportValue subnet35b4A, !If [GetUTNetworkValues, !ImportValue subnet35b3A, !If [GetSITNetworkValues, !ImportValue subnet36b2A, !If [GetProdNetworkValuesIreland,!ImportValue subnet38b0B, !If [GetValNetworkValuesIreland, !ImportValue subnet37b0B, ""]]]]]]]]]
  RedisSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupName: !Sub "${Prefix}-${EnvName}-elc-vpc3"
        GroupDescription: "Redis Security Group"
# Fetch the VPC based on the condition as per Environment selected
        VpcId: !If [GetValNetworkValues, !ImportValue vpc30A, !If [GetProdNetworkValues, !ImportValue vpc30A, !If [GetDevNetworkValues, !ImportValue vpc31A, !If [GetMLNetworkValues, !ImportValue vpc31A, !If [GetPTNetworkValues, !ImportValue vpc34A, !If [GetUTNetworkValues, !ImportValue vpc33A, !If [GetSITNetworkValues, !ImportValue vpc32A, !If [GetProdNetworkValuesIreland,!ImportValue vpc30B, !If [GetValNetworkValuesIreland, !ImportValue vpc30B, ""]]]]]]]]]
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref RedisPort
          ToPort: !Ref RedisPort
          CidrIp: !Ref CIDR
        Tags:
          - Key: Name
            Value: !Sub ${Prefix}-${EnvName}-elc-vpc3
          - Key: Environment
            Value: !Sub ${EnvName}
          - Key: Product-version
            Value: !Ref Productversion
 # A replication group is a collection of cache clusters, where one of the clusters 
 # is a primary read-write cluster and the others are read-only replicas
  RedisCluster:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Condition: ClusterModeEnabled
    Properties:
        AtRestEncryptionEnabled: 'true'
        AutomaticFailoverEnabled: !Ref AutomaticFailoverEnabled
        CacheNodeType: !Ref NodeInstanceType
        CacheSubnetGroupName: !Ref RedisSubnetGroup
        CacheParameterGroupName: "default.redis3.2.cluster.on"
        NumNodeGroups: !Ref NumNodeGroups
        ReplicasPerNodeGroup: !Ref ReplicasPerNodeGroup
        ReplicationGroupId: !Sub "${Prefix}-${EnvName}-redis"
        Engine: "redis"
        EngineVersion: !Ref EngineVersion
        Port: !Ref RedisPort
        PreferredMaintenanceWindow: Sun:01:00-Sun:03:00
        SnapshotRetentionLimit: !Ref SnapshotRetentionLimit
        ReplicationGroupDescription: My Redis Group
        SecurityGroupIds:
         - !Ref RedisSecurityGroup
        SnapshotWindow: 22:00-23:59
        TransitEncryptionEnabled: 'true'
        AuthToken: PvaiSe1fc$reZnwo#sk2
 # A replication group for Single Redis Instance
  RedisCache:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Condition: ClusterModeDisabled
    Properties:
        AtRestEncryptionEnabled: 'true'
        AutomaticFailoverEnabled: !Ref AutomaticFailoverEnabled
        CacheNodeType: !Ref NodeInstanceType
        CacheSubnetGroupName: !Ref RedisSubnetGroup
        CacheParameterGroupName: "default.redis3.2"
        NumNodeGroups: 1
        ReplicasPerNodeGroup: !Ref ReplicasPerNodeGroup
        ReplicationGroupId: !Sub "${Prefix}-${EnvName}-redis"
        Engine: "redis"
        EngineVersion: "3.2.10"
        Port: !Ref RedisPort
        PreferredMaintenanceWindow: Sun:01:00-Sun:03:00
        SnapshotRetentionLimit: !Ref SnapshotRetentionLimit
        ReplicationGroupDescription: My Redis Group
        SecurityGroupIds:
         - !Ref RedisSecurityGroup
        SnapshotWindow: 05:00-09:00
  # Creating DNS record for the RedisCluster
  DNSRecordForRedisCluster:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateResourceInNVirginiaWithCluster
    Properties:
      HostedZoneName: !Ref HostedZoneResource
      Comment: Private DNS for RDS Instance.
      RecordSets:
      - Name: !Sub "${Prefix}-${EnvName}-redis-cache-01.${HostedZoneResource}" 
        Type: CNAME
        TTL: '60'
        ResourceRecords:
        - !GetAtt RedisCluster.ConfigurationEndPoint.Address
  # Creating DNS record for the Redis Instance
  DNSRecordForRedis:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateResourceInNVirginiaWithOutCluster
    Properties:
      HostedZoneName: !Ref HostedZoneResource
      Comment: Private DNS for RDS Instance.
      RecordSets:
      - Name: !Sub "${Prefix}-${EnvName}-redis-cache-01.${HostedZoneResource}" 
        Type: CNAME
        TTL: '60'
        ResourceRecords:
        - !GetAtt RedisCache.PrimaryEndPoint.Address